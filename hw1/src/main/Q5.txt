[  DT    ]
------------------------------------------------------------------------
This would mean modifying the Src.java file in B just like how we
modified the Src.java file in Is. A new abastract Value class can be
created and diffrenet types of value such as Ints and Booleans can be
represented by sub-classes of the Value class. Also integer expressions
and boolean expressions should derive from a single Expr abstract class.

[  Nest  ]
------------------------------------------------------------------------
For adding support for nested environment, B needs to support memory
acess restrictions. We can handle this much like the way we did it in
Is. We need to modify the Memory class in B and add a linked
list like structure/environment instead of the hash map. We also need to
modify the Src.java file to handle environments. One thing to note is
that in the generated bytecode, the variables need to be unique. So for
each level of nesting, Bytecode.java need to emit bytecode corresponding
to varaibles which represent the depth of the environment.

[  Proc  ]
------------------------------------------------------------------------
Adding support for procedures would involve adding support for a "goto"
instructions and "LABLES" for Bytecode.java file. Like in other cases,
a Proc class can be added to Src.java. When "bcgen()" method is called
on Proc class, label need to generated from Bytecode.java and "goto"
statements generated when we call the procedure. 

[  Ref   ]
------------------------------------------------------------------------
This would involve adding support for pointers. Again we can model this
like we did in Is by adding a RefEnv class which would extend the Env
class made in Nest. Whenever we do computation on Ref varabiles, the
Bytecode.java need to emit instructions which would indicate if
variables are pointers. We could also keep the original implementation
of Memory in B and use that as our implmentation of Ref values. The
generated bytecode can look like this with Ref values:

   1   LDC 42
   2   STORE [1]
   3   LDC 32
   4   STORE [1]


[  List  ]
------------------------------------------------------------------------
For implmenting lists, help from the operating system would be useful if
we can just call malloc() to get a block of memory. Since (in theory) we
already implemented pointers, lists can be reffered to as pointers. To
get elements from the block of memory which is the array, you would do
some pointer arithmetic based on the size of the value in array to
calculate some offset into the block of memeory to get the desired
value. We would have to add a LValue class to Src.jav in B and have
Bytecode.java emit instructions to allocate space for the list and
instructions for getting items from the allocated space.
