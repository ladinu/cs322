/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.dt.interpreter;
public class Parser implements ParserConstants {

//-- Define the grammatical rules for programs: ------------------------------
  final public Program prog() throws ParseException {
                   Proc[] procs; Stmt body;
    procs = procs(0);
    body = stmts();
    {if (true) return new Program(procs, body);}
    throw new Error("Missing return statement in function");
  }

  final public Proc[] procs(int n) throws ParseException {
                        Proc p; Proc[] ps;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
      p = proc();
      ps = procs(n+1);
                              ps[n]=p;
      break;
    default:
      jj_la1[0] = jj_gen;
      ps = new Proc[n];
    }
    {if (true) return ps;}
    throw new Error("Missing return statement in function");
  }

  final public Proc proc() throws ParseException {
                Token t; Formal[] fs; Stmt s;
    jj_consume_token(1);
    t = jj_consume_token(IDENT);
    jj_consume_token(2);
    fs = formals();
    jj_consume_token(3);
    s = block();
    {if (true) return new Proc(t.image, fs, s);}
    throw new Error("Missing return statement in function");
  }

  final public Formal[] formals() throws ParseException {
                       Formal f; Formal[] fs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
    case IDENT:
      f = formal();
      fs = nformals(1);
                                fs[0]=f;
      break;
    default:
      jj_la1[1] = jj_gen;
      fs = new Formal[0];
    }
    {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Formal[] nformals(int n) throws ParseException {
                             Formal f; Formal[] fs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
      jj_consume_token(4);
      f = formal();
      fs = nformals(n+1);
                                      fs[n]=f;
      break;
    default:
      jj_la1[2] = jj_gen;
      fs = new Formal[n];
    }
    {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final public Formal formal() throws ParseException {
                    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
      jj_consume_token(5);
      t = jj_consume_token(IDENT);
                    {if (true) return new ByRef(t.image);}
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
                    {if (true) return new Formal(t.image);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//-- Define the grammatical rules for statements: ----------------------------
  final public Stmt block() throws ParseException {
                 Stmt s1;
    jj_consume_token(6);
    s1 = stmts();
    jj_consume_token(7);
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public Stmt stmt() throws ParseException {
                Token h, t; Expr e; Stmt s1, s2; Expr[] a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      s1 = block();
    {if (true) return s1;}
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        jj_consume_token(8);
        e = expr();
        jj_consume_token(9);
                           {if (true) return new Assign(t.image, e);}
        break;
      case 2:
        jj_consume_token(2);
        a = args();
        jj_consume_token(3);
        jj_consume_token(9);
                           {if (true) return new Call(t.image, a);}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 10:
      jj_consume_token(10);
      jj_consume_token(2);
      e = expr();
      jj_consume_token(3);
      s1 = stmt();
      jj_consume_token(11);
      s2 = stmt();
     {if (true) return new If(e, s1, s2);}
      break;
    case 12:
      jj_consume_token(12);
      jj_consume_token(2);
      e = expr();
      jj_consume_token(3);
      s1 = stmt();
     {if (true) return new While(e, s1);}
      break;
    case 13:
      jj_consume_token(13);
      e = expr();
      jj_consume_token(9);
     {if (true) return new Print(e);}
      break;
    case 14:
      jj_consume_token(14);
      t = jj_consume_token(IDENT);
      jj_consume_token(8);
      e = expr();
      jj_consume_token(9);
     {if (true) return new VarDecl(t.image, e);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Stmt stmts() throws ParseException {
                 Stmt s1, s2;
    // one or more statements:
      s1 = stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 10:
    case 12:
    case 13:
    case 14:
    case IDENT:
      s2 = stmts();
                           s1=new Seq(s1,s2);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public Expr[] args() throws ParseException {
                  Expr e; Expr[] a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
    case 15:
    case INTLIT:
    case IDENT:
      e = expr();
      a = nargs(1);
                          a[0]=e;
      break;
    default:
      jj_la1[7] = jj_gen;
      a = new Expr[0];
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expr[] nargs(int n) throws ParseException {
                        Expr e; Expr[] a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
      jj_consume_token(4);
      e = expr();
      a = nargs(n+1);
                                a[n]=e;
      break;
    default:
      jj_la1[8] = jj_gen;
      a = new Expr[n];
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//-- Define the grammatical rules for expressions: ---------------------------
  final public Expr expr() throws ParseException {
                Expr e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
    case INTLIT:
    case IDENT:
      e = rel();
      break;
    case 15:
      e = lambda();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                           {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expr lambda() throws ParseException {
                  Token t; Expr e;
    jj_consume_token(15);
    t = jj_consume_token(IDENT);
    jj_consume_token(16);
    e = expr();
    {if (true) return new Lambda(t.image, e);}
    throw new Error("Missing return statement in function");
  }

  final public Expr rel() throws ParseException {
               Expr m, n;
    n = term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        m = term();
                              n = new LT(n,m);
        break;
      case 18:
        jj_consume_token(18);
        m = term();
                              n = new EqEq(n,m);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Expr term() throws ParseException {
                Expr m, n;
    n = factor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 20:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        jj_consume_token(19);
        m = factor();
                                 n = new Plus(n,m);
        break;
      case 20:
        jj_consume_token(20);
        m = factor();
                                 n = new Minus(n,m);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Expr factor() throws ParseException {
                  Expr m, n;
    n = app();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      jj_consume_token(21);
      m = app();
                           n = new Mult(n,m);
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Expr app() throws ParseException {
               Expr m, n;
    n = atom();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
      jj_consume_token(22);
      m = atom();
                             n = new Apply(n,m);
    }
                                                        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Expr atom() throws ParseException {
                Expr e; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      e = expr();
      jj_consume_token(3);
                     {if (true) return e;}
      break;
    case INTLIT:
      t = jj_consume_token(INTLIT);
                     {if (true) return new Int(Integer.parseInt(t.image));}
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
                     {if (true) return new Var(t.image);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0x20,0x10,0x20,0x104,0x7440,0x7440,0x20008004,0x10,0x20008004,0x60000,0x60000,0x180000,0x180000,0x200000,0x400000,0x20000004,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2,0x0,0x2,0x0,0x2,0x2,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
